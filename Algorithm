 # Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.layers import Dropout
import keras.optimizers as optimizers
from keras.losses import categorical_crossentropy
from keras.layers import Activation
from keras import utils
from keras.preprocessing.image import ImageDataGenerator

num_classes = 5

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

x_train = train_datagen.flow_from_directory('Oranges/training_set',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

x_test = test_datagen.flow_from_directory('Oranges/test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

y_train = utils.to_categorical(x_train, num_classes)
y_test = utils.to_categorical(x_test, num_classes)


from tensorflow.python.client import device_lib
print(device_lib.list_local_devices())

# Initialising the CNN
classifier = Sequential()
classifier.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=(64, 64, 3)))
classifier.add(Activation('relu'))
classifier.add(Conv2D(64, (3, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Dropout(0.25))

classifier.add(Conv2D(64, (3, 3), padding='same'))
classifier.add(Activation('relu'))
classifier.add(Conv2D(64, (3, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Dropout(0.25))

classifier.add(Flatten())
classifier.add(Dense(512))
classifier.add(Activation('relu'))
classifier.add(Dropout(0.5))
classifier.add(Dense(5)) #num classes
classifier.add(Activation('softmax'))

# Compiling the CNN
opt = optimizers.rmsprop(lr=0.0001, decay=1e-6)
classifier.compile(optimizer=opt,
              loss=categorical_crossentropy,
              metrics=['accuracy'])
#classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

#Fitting the CNN to the images

classifier.fit_generator(x_train,
                         steps_per_epoch = 800,
                         epochs = 25,
                         validation_data = x_test,
                         validation_steps = 62.5)

classifier.save('my_model.h5')  # creates a HDF5 file 'my_model.h5'